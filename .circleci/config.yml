version: 2
jobs:
  test:
    working_directory: ~/snapapp_api
    docker:
      - image: circleci/ruby:2.4.3
        environment:
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          RAILS_ENV: test
      - image: postgres:10.3-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: snapapp_api_test
          POSTGRES_PASSWORD: ""
    steps:
      - checkout

      # Restore Cached Dependencies
      - type: cache-restore
        name: Restore bundle cache
        key: snapapp_api-{{ checksum "Gemfile.lock" }}

      # Bundle install dependencies
      - run: bundle install --path vendor/bundle

      # Cache Dependencies
      - type: cache-save
        name: Store bundle cache
        key: snapapp_api-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

      # Wait for DB
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      # Setup the database
      - run: bundle exec rake db:drop
      - run: bundle exec rake db:create
      - run: bundle exec rake db:migrate

      # Run the tests
      - run: bundle exec rake

  build:
    machine: true
    steps:
      - checkout
      - run: echo ${GCLOUD_KEY} > ${HOME}/gcp-key.json
      - run: echo ${GCLOUD_KEY} > ./gcp-key.json
      - run: docker build --rm=false -t us.gcr.io/${GCLOUD_PROJECT}/${IMAGE_NAME}:$CIRCLE_SHA1 .
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCLOUD_PROJECT}
      - run: gcloud docker -- push us.gcr.io/${GCLOUD_PROJECT}/${IMAGE_NAME}:$CIRCLE_SHA1

  deploy:
    docker:
      - image: nbriar/ubuntu-circleci
    steps:
      - checkout
      - run: echo ${GCLOUD_KEY} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCLOUD_PROJECT}
      - run: gcloud --quiet config set compute/zone ${GCLOUD_ZONE}
      - run: gcloud --quiet container clusters get-credentials ${GCLOUD_K8S_CLUSTER_NAME}
      - run: ./deploy.sh

workflows:
  version: 2
  test-build-and-deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - deploy:
          requires:
            - build
          # filters:
          #   branches:
          #     only: master
